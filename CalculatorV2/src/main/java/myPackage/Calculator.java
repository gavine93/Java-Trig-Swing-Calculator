
//(X) Make GUI
// Check if balanced equation
// split output string into tokens
// digits go to 
// convert to postfix
// do equation
// return string
// output to textfield
// create exception class for bad inputs

package myPackage;

import java.util.*;
import javax.swing.JOptionPane;

/**
 *
 * @author gavin
 */
public class Calculator extends javax.swing.JFrame {

    /**
     * Creates new form Calculator
     */
    public Calculator() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        output = new javax.swing.JTextField();
        rightParenButton = new javax.swing.JButton();
        leftParenButton = new javax.swing.JButton();
        clearButton = new javax.swing.JButton();
        cosButton = new javax.swing.JButton();
        tanButton = new javax.swing.JButton();
        sinButton = new javax.swing.JButton();
        nineButton = new javax.swing.JButton();
        eightButton = new javax.swing.JButton();
        sevenButton = new javax.swing.JButton();
        divideButton = new javax.swing.JButton();
        aCosButton = new javax.swing.JButton();
        aTanButton = new javax.swing.JButton();
        aSinButton = new javax.swing.JButton();
        natLogButton = new javax.swing.JButton();
        fiveButton = new javax.swing.JButton();
        multButton = new javax.swing.JButton();
        fourButton = new javax.swing.JButton();
        log10Button = new javax.swing.JButton();
        sixButton = new javax.swing.JButton();
        subButton = new javax.swing.JButton();
        twoButton = new javax.swing.JButton();
        aCotButton = new javax.swing.JButton();
        cotButton = new javax.swing.JButton();
        threeButton = new javax.swing.JButton();
        oneButton = new javax.swing.JButton();
        expButton = new javax.swing.JButton();
        equalButton = new javax.swing.JButton();
        zeroButton = new javax.swing.JButton();
        addButton = new javax.swing.JButton();
        decimalButton = new javax.swing.JButton();
        leftCurlyButton = new javax.swing.JButton();
        rightCurlyButton1 = new javax.swing.JButton();
        rightBracketButton = new javax.swing.JButton();
        leftBracketButton = new javax.swing.JButton();

        jButton1.setText("jButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Calculator");
        setName("CalcFrame"); // NOI18N
        setResizable(false);
        setSize(new java.awt.Dimension(640, 420));

        output.setEditable(false);
        output.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        output.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        rightParenButton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        rightParenButton.setText(")");
        rightParenButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rightParenButtonActionPerformed(evt);
            }
        });

        leftParenButton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        leftParenButton.setText("(");
        leftParenButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                leftParenButtonActionPerformed(evt);
            }
        });

        clearButton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        clearButton.setText("AC");
        clearButton.setMaximumSize(null);
        clearButton.setMinimumSize(null);
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        cosButton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        cosButton.setText("Cos");
        cosButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cosButtonActionPerformed(evt);
            }
        });

        tanButton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        tanButton.setText("Tan");
        tanButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tanButtonActionPerformed(evt);
            }
        });

        sinButton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        sinButton.setText("Sin");
        sinButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sinButtonActionPerformed(evt);
            }
        });

        nineButton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        nineButton.setText("9");
        nineButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nineButtonActionPerformed(evt);
            }
        });

        eightButton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        eightButton.setText("8");
        eightButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eightButtonActionPerformed(evt);
            }
        });

        sevenButton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        sevenButton.setText("7");
        sevenButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sevenButtonActionPerformed(evt);
            }
        });

        divideButton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        divideButton.setText("/");
        divideButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                divideButtonActionPerformed(evt);
            }
        });

        aCosButton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        aCosButton.setText("ArcCos");
        aCosButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aCosButtonActionPerformed(evt);
            }
        });

        aTanButton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        aTanButton.setText("ArcTan");
        aTanButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aTanButtonActionPerformed(evt);
            }
        });

        aSinButton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        aSinButton.setText("ArcSin");
        aSinButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aSinButtonActionPerformed(evt);
            }
        });

        natLogButton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        natLogButton.setText("Ln");
        natLogButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                natLogButtonActionPerformed(evt);
            }
        });

        fiveButton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        fiveButton.setText("5");
        fiveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fiveButtonActionPerformed(evt);
            }
        });

        multButton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        multButton.setText("*");
        multButton.setMaximumSize(null);
        multButton.setMinimumSize(null);
        multButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                multButtonActionPerformed(evt);
            }
        });

        fourButton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        fourButton.setText("4");
        fourButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fourButtonActionPerformed(evt);
            }
        });

        log10Button.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        log10Button.setText("Log10");
        log10Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                log10ButtonActionPerformed(evt);
            }
        });

        sixButton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        sixButton.setText("6");
        sixButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sixButtonActionPerformed(evt);
            }
        });

        subButton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        subButton.setText("-");
        subButton.setMaximumSize(null);
        subButton.setMinimumSize(null);
        subButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subButtonActionPerformed(evt);
            }
        });

        twoButton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        twoButton.setText("2");
        twoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                twoButtonActionPerformed(evt);
            }
        });

        aCotButton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        aCotButton.setText("ArcCot");
        aCotButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aCotButtonActionPerformed(evt);
            }
        });

        cotButton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        cotButton.setText("Cot");
        cotButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cotButtonActionPerformed(evt);
            }
        });

        threeButton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        threeButton.setText("3");
        threeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                threeButtonActionPerformed(evt);
            }
        });

        oneButton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        oneButton.setText("1");
        oneButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                oneButtonActionPerformed(evt);
            }
        });

        expButton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        expButton.setText("^");
        expButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                expButtonActionPerformed(evt);
            }
        });

        equalButton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        equalButton.setText("=");
        equalButton.setMaximumSize(null);
        equalButton.setMinimumSize(null);
        equalButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                equalButtonActionPerformed(evt);
            }
        });

        zeroButton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        zeroButton.setText("0");
        zeroButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zeroButtonActionPerformed(evt);
            }
        });

        addButton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        addButton.setText("+");
        addButton.setMaximumSize(null);
        addButton.setMinimumSize(null);
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        decimalButton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        decimalButton.setText(".");
        decimalButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                decimalButtonActionPerformed(evt);
            }
        });

        leftCurlyButton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        leftCurlyButton.setText("{");
        leftCurlyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                leftCurlyButtonActionPerformed(evt);
            }
        });

        rightCurlyButton1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        rightCurlyButton1.setText("}");
        rightCurlyButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rightCurlyButton1ActionPerformed(evt);
            }
        });

        rightBracketButton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        rightBracketButton.setText("]");
        rightBracketButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rightBracketButtonActionPerformed(evt);
            }
        });

        leftBracketButton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        leftBracketButton.setText("[");
        leftBracketButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                leftBracketButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cosButton, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(tanButton, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(cotButton, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(natLogButton, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(aCosButton)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(sevenButton)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(eightButton)
                                    .addGap(7, 7, 7)
                                    .addComponent(nineButton)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(divideButton))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(aTanButton)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(fourButton)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(fiveButton)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(sixButton)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(multButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(aCotButton)
                                    .addComponent(log10Button))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(zeroButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(decimalButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(equalButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(oneButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(twoButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(threeButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(subButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(sinButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(aSinButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(leftParenButton)
                                .addGap(10, 10, 10)
                                .addComponent(rightParenButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(leftBracketButton)
                                .addGap(14, 14, 14)
                                .addComponent(rightBracketButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(leftCurlyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(rightCurlyButton1)
                                .addGap(4, 4, 4))
                            .addComponent(output))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(clearButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(expButton, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {aCosButton, aCotButton, aSinButton, aTanButton, addButton, clearButton, cosButton, cotButton, decimalButton, divideButton, eightButton, equalButton, expButton, fiveButton, fourButton, log10Button, multButton, natLogButton, nineButton, oneButton, sevenButton, sinButton, sixButton, subButton, tanButton, threeButton, twoButton, zeroButton});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(output, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(clearButton, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rightParenButton, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(leftParenButton, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sinButton, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(aSinButton, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(expButton, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(leftBracketButton, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rightCurlyButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(leftCurlyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rightBracketButton, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nineButton, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(eightButton, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sevenButton, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(divideButton, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(aCosButton, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cosButton, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tanButton, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(aTanButton, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fourButton, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fiveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sixButton, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(multButton, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cotButton, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(aCotButton, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(subButton, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(threeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(twoButton, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(oneButton, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(decimalButton, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(zeroButton, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(equalButton, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(log10Button, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(natLogButton, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {aCosButton, aCotButton, aSinButton, aTanButton, addButton, clearButton, cosButton, cotButton, decimalButton, divideButton, eightButton, equalButton, expButton, fiveButton, fourButton, leftParenButton, log10Button, multButton, natLogButton, nineButton, oneButton, rightParenButton, sevenButton, sinButton, sixButton, subButton, tanButton, threeButton, twoButton, zeroButton});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void zeroButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zeroButtonActionPerformed
        output.setText(output.getText() + "0");
    }//GEN-LAST:event_zeroButtonActionPerformed

    private void oneButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_oneButtonActionPerformed
        output.setText(output.getText() + "1");
    }//GEN-LAST:event_oneButtonActionPerformed

    private void twoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_twoButtonActionPerformed
        output.setText(output.getText() + "2");
    }//GEN-LAST:event_twoButtonActionPerformed

    private void threeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_threeButtonActionPerformed
       output.setText(output.getText() + "3");
    }//GEN-LAST:event_threeButtonActionPerformed

    private void fourButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fourButtonActionPerformed
        output.setText(output.getText() + "4");
    }//GEN-LAST:event_fourButtonActionPerformed

    private void fiveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fiveButtonActionPerformed
        output.setText(output.getText() + "5");
    }//GEN-LAST:event_fiveButtonActionPerformed

    private void sixButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sixButtonActionPerformed
       output.setText(output.getText() + "6");
    }//GEN-LAST:event_sixButtonActionPerformed

    private void sevenButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sevenButtonActionPerformed
        output.setText(output.getText() + "7");
    }//GEN-LAST:event_sevenButtonActionPerformed

    private void eightButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eightButtonActionPerformed
        output.setText(output.getText() + "8");
    }//GEN-LAST:event_eightButtonActionPerformed

    private void nineButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nineButtonActionPerformed
        output.setText(output.getText() + "9");
    }//GEN-LAST:event_nineButtonActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        output.setText(output.getText() + "+");
    }//GEN-LAST:event_addButtonActionPerformed

    private void subButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subButtonActionPerformed
        output.setText(output.getText() + "-");
    }//GEN-LAST:event_subButtonActionPerformed

    private void multButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_multButtonActionPerformed
        output.setText(output.getText() + "*");
    }//GEN-LAST:event_multButtonActionPerformed

    private void divideButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_divideButtonActionPerformed
        output.setText(output.getText() + "/");
    }//GEN-LAST:event_divideButtonActionPerformed

    private void leftParenButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_leftParenButtonActionPerformed
        output.setText(output.getText() + "(");
    }//GEN-LAST:event_leftParenButtonActionPerformed

    private void rightParenButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rightParenButtonActionPerformed
        output.setText(output.getText() + ")");
    }//GEN-LAST:event_rightParenButtonActionPerformed

    private void expButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_expButtonActionPerformed
        output.setText(output.getText() + "^");
    }//GEN-LAST:event_expButtonActionPerformed

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        output.setText("");
    }//GEN-LAST:event_clearButtonActionPerformed

    private void decimalButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_decimalButtonActionPerformed
        output.setText(output.getText() + ".");
    }//GEN-LAST:event_decimalButtonActionPerformed

    private void equalButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_equalButtonActionPerformed
        String workingEquation = output.getText();
        
        if (isBalanced(workingEquation)){
            output.setText(totalEval((InfixToPostFix(workingEquation))));
            
            // convert to postfix, evaluate, set output text to finished equation.
            
        } else {
            JOptionPane.showMessageDialog(this, "Equation not balanced, check parenthesis!", "Unbalanced Equation", JOptionPane.ERROR_MESSAGE);
        }
        
    }//GEN-LAST:event_equalButtonActionPerformed

    private void aSinButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aSinButtonActionPerformed
        output.setText(output.getText() + "asin");
    }//GEN-LAST:event_aSinButtonActionPerformed

    private void aCosButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aCosButtonActionPerformed
        output.setText(output.getText() + "acos");
    }//GEN-LAST:event_aCosButtonActionPerformed

    private void aTanButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aTanButtonActionPerformed
        output.setText(output.getText() + "atan");
    }//GEN-LAST:event_aTanButtonActionPerformed

    private void aCotButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aCotButtonActionPerformed
        output.setText(output.getText() + "acot");
    }//GEN-LAST:event_aCotButtonActionPerformed

    private void log10ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_log10ButtonActionPerformed
        output.setText(output.getText() + "log");
    }//GEN-LAST:event_log10ButtonActionPerformed

    private void natLogButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_natLogButtonActionPerformed
        output.setText(output.getText() + "ln");
    }//GEN-LAST:event_natLogButtonActionPerformed

    private void cotButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cotButtonActionPerformed
        output.setText(output.getText() + "cot");
    }//GEN-LAST:event_cotButtonActionPerformed

    private void tanButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tanButtonActionPerformed
        output.setText(output.getText() + "tan");
    }//GEN-LAST:event_tanButtonActionPerformed

    private void cosButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cosButtonActionPerformed
        output.setText(output.getText() + "cos");
    }//GEN-LAST:event_cosButtonActionPerformed

    private void sinButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sinButtonActionPerformed
        output.setText(output.getText() + "sin");
    }//GEN-LAST:event_sinButtonActionPerformed

    private void leftCurlyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_leftCurlyButtonActionPerformed
        output.setText(output.getText() + "{");
    }//GEN-LAST:event_leftCurlyButtonActionPerformed

    private void rightCurlyButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rightCurlyButton1ActionPerformed
       output.setText(output.getText() + "}");
    }//GEN-LAST:event_rightCurlyButton1ActionPerformed

    private void rightBracketButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rightBracketButtonActionPerformed
        output.setText(output.getText() + "]");
    }//GEN-LAST:event_rightBracketButtonActionPerformed

    private void leftBracketButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_leftBracketButtonActionPerformed
        output.setText(output.getText() + "[");
    }//GEN-LAST:event_leftBracketButtonActionPerformed

    
    // check if equation parenthesis are balanced
    public boolean isBalanced (String equation) {
        
        // create stack for holding parens
         Stack<Character> stack  = new Stack<Character>();
         
        for(int i = 0; i < equation.length(); i++) {
            char c = equation.charAt(i);
            if(c == '(' || c == '[' || c == '{' ) {   
                stack.push(c);
            
                // if closing paren, and the stack is empty or the top of the stack
                // does not match current paren, not balanced
            } else if(c == ']') {
                if(stack.isEmpty() || stack.pop() != '[') {
                    return false;
                }
            } else if(c == ')') {
                if(stack.isEmpty() || stack.pop() != '(') {
                    return false;
                }           
            } else if(c == '}') {
                if(stack.isEmpty() || stack.pop() != '{') {
                    return false;
                }
            }

        }
        return true;
    }
        
    // check if char is an arithmetic operator
   public boolean isOperator(char c){
      if (c == '+'|| c == '-'|| c == '*'|| c == '/'|| c == '^'){
         return true;
      } else {
         return false;
      }
     
   }
   
   // check if string is a trig function
   public boolean isFunction(String word){
      return    word.equals("sin") ||
                word.equals("cos") ||
                word.equals("tan") ||
                word.equals("cot") ||
                word.equals("asin")||
                word.equals("acos")||
                word.equals("atan")||
                word.equals("ctg") ||
                word.equals("ln")  ||
                word.equals("log");
   }
  
   
    // get precendence of operator
   public int getPrecedence(char operator){
      int precedence = 0;
        
      switch (operator){
            
         case '^':
            precedence = 4;
            break;
                
         case '*':
            case '/':
            precedence = 3;
            break;
                
         case '+':
            case '-':
            precedence = 2;
            
      }
    
        
        
      return precedence;
   }
    
   
   
    // convert input format to postfix 
   public Queue<String> InfixToPostFix(String infix){
        
        // variable for holding each part of equation
      
        for (int i = 0; i < infix.length(); i++){
            // replace brackets/curly brackets with parenthesis
            if (infix.charAt(i)== '{'){
                infix=infix.replace(infix.charAt(i), '(');
            }           
             if (infix.charAt(i)== '}'){
                infix=infix.replace(infix.charAt(i), ')');
            }
             if (infix.charAt(i)== '['){
                infix=infix.replace(infix.charAt(i), '(');
            }            
             if (infix.charAt(i)== ']'){
                infix=infix.replace(infix.charAt(i), ')');
            }
            
        }
        
        
        // operators must be string to hold trig functions
      Stack<String> operators = new Stack<String>();
      Queue<String> queue = new LinkedList<>();
       
        
      // while string isn't empty, set current char to first char in String
      while (!infix.isEmpty()) {
         int index = 0;
         char current = infix.charAt(index);
         String token = "";   
         
         
            
           // while the current char is a whole or decimal number
         while (Character.isDigit(current)||current == '.'){
               // add it together
            token += current;
            index++;
               
               // move while loop to next index instead of looping forever..
            if (index < infix.length()){
               current = infix.charAt(index);
            } else {
               break;
            }
         }
           
           // if the token was a number, add to queue, then delete those parts of the string
         if (index != 0){
            queue.add(token);
            infix = infix.substring(index, infix.length()); // rememeber to test this
            index = 0;
         }
           
           // while the current char is a letter
         while (Character.isAlphabetic(current)){
               //concatenate
            token += current;
            index++;
            //infix = infix.substring(index, infix.length());
           
               // move while loop to next index instead of looping forever...
            if (index < infix.length()){
               current = infix.charAt(index);
            } else {
               break;
            }
         
         }   
           // if it was alphabetic, put it in the stack
         if (index != 0)
         {
            operators.push(token);  
            infix = infix.substring(index, infix.length());
            index = 0;
         }      
           
           
           // if it's an operator
         if (isOperator(current)){
               // while the operator stack is not empty and the stack operator has greater precence, or equal precedence and is not right associative
            while (!operators.isEmpty() && getPrecedence(operators.peek().charAt(0)) > getPrecedence(current) 
            || !operators.isEmpty() && getPrecedence(operators.peek().charAt(0)) == getPrecedence(current) && current != '^')
            {
                // if the precedence of operator on stack is less than current operator
               queue.add(operators.pop());
            }
            
            // push current operator to stack
            operators.push(Character.toString(current)); 
            
            // delete operator from string, reset index
            infix = infix.substring(index+1, infix.length()); 
            index = 0;  
               
         }
        
           // if left parenthesis, move to stack, delete it from string, reset index
         if (current == '('){
            operators.push(Character.toString(current));
            infix = infix.substring(index+1, infix.length());
            index = 0;
         }
            
           // if right parenthesis 
         if (current == ')'){
               
               // add operators to queue until we reach left parenthesis
            while (!operators.peek().equals("(")){
               queue.add(operators.pop());
            }
               
           // removing left paren
            operators.pop();  
               
            if (!operators.isEmpty() && isFunction(operators.peek())){
               queue.add(operators.pop());
            
            }
            
            // remove parenthesis from string, and reset index
            infix = infix.substring(index+1, infix.length());
            index = 0;
         }
          
          
      } // end string length while loop
        
        // pop remaining operators from the stack and add to queue
      while (!operators.isEmpty()){
         queue.add(operators.pop());
      }
        
       // return postfix expression
      return queue;
   }
    
    // evaluation for functions
   public double funcEval(String function, double number){
    
      double result = 0.0;
    
      switch (function){
      
         case "sin":
            result = Math.sin(number);
            break;
                
         case "cos":
            result = Math.cos(number);
            break;
                
         case "tan":
            result = Math.tan(number);
            break;
          
         case "cot":
            result = 1.0 / Math.tan(number);
            break;
                
         case "asin":
            result = Math.asin(number);
            break;
                
         case "acos":
            result = Math.acos(number);
            break;
                
         case "atan":
            result = Math.atan(number);
            break;
                
         case "ctg":
            result = Math.atan(1.0 / number);
            break;
            
         case "ln":
            result = Math.log(number);
            break;
                
         case "log":
            result = Math.log10(number);
            break;
                
         default:
            break;
      
      }
    
      return result;
    
   }
    
    
    
    // evaluation for arithmetic operators
   public double opEval(char operator, double rightNum, double leftNum) {
    
      double result = 0.0;
    
      switch (operator){
      
         case '+':
            result = leftNum + rightNum;
            break;
                
         case '-':
            result = leftNum - rightNum;
            break;
                
         case '/':
            result = leftNum / rightNum;
            break;
          
         case '*':
            result = leftNum * rightNum;
            break;
                
         case '^':
            result = Math.pow(leftNum, rightNum);
            break;
                                
         default:
            break;
      
      }
    
      return result;
    
    
   
    
   }
    
   public String totalEval(Queue<String> queue) {
    
      Stack<Double> stack = new Stack<Double>();
    
      String result = "";
    
    // do for each item in queue
      while (!queue.isEmpty()){
         String token = queue.remove();
      
         // if token is an operator and stack is not empty
         if (isOperator(token.charAt(0)) && !stack.isEmpty()){
         double head = stack.pop();
            if (!stack.isEmpty()){
               stack.push(opEval(token.charAt(0), head, stack.pop()));
            }
            
            // if token is a function and 
         } else if (isFunction(token) && !stack.isEmpty()) {
            
               stack.push(funcEval(token, stack.pop()));
            
         
         } else {
         
            stack.push(Double.parseDouble(token));
         
         }
      
      
      }
    
    
    
    
      return stack.pop().toString();
   }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Calculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Calculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Calculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Calculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Calculator().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton aCosButton;
    private javax.swing.JButton aCotButton;
    private javax.swing.JButton aSinButton;
    private javax.swing.JButton aTanButton;
    private javax.swing.JButton addButton;
    private javax.swing.JButton clearButton;
    private javax.swing.JButton cosButton;
    private javax.swing.JButton cotButton;
    private javax.swing.JButton decimalButton;
    private javax.swing.JButton divideButton;
    private javax.swing.JButton eightButton;
    private javax.swing.JButton equalButton;
    private javax.swing.JButton expButton;
    private javax.swing.JButton fiveButton;
    private javax.swing.JButton fourButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton leftBracketButton;
    private javax.swing.JButton leftCurlyButton;
    private javax.swing.JButton leftParenButton;
    private javax.swing.JButton log10Button;
    private javax.swing.JButton multButton;
    private javax.swing.JButton natLogButton;
    private javax.swing.JButton nineButton;
    private javax.swing.JButton oneButton;
    private javax.swing.JTextField output;
    private javax.swing.JButton rightBracketButton;
    private javax.swing.JButton rightCurlyButton1;
    private javax.swing.JButton rightParenButton;
    private javax.swing.JButton sevenButton;
    private javax.swing.JButton sinButton;
    private javax.swing.JButton sixButton;
    private javax.swing.JButton subButton;
    private javax.swing.JButton tanButton;
    private javax.swing.JButton threeButton;
    private javax.swing.JButton twoButton;
    private javax.swing.JButton zeroButton;
    // End of variables declaration//GEN-END:variables
}
